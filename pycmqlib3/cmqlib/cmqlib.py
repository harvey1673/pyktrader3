# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cmqlib
else:
    import _cmqlib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmqlib.delete_SwigPyIterator

    def value(self):
        return _cmqlib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cmqlib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cmqlib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cmqlib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cmqlib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cmqlib.SwigPyIterator_copy(self)

    def next(self):
        return _cmqlib.SwigPyIterator_next(self)

    def __next__(self):
        return _cmqlib.SwigPyIterator___next__(self)

    def previous(self):
        return _cmqlib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cmqlib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cmqlib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cmqlib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cmqlib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cmqlib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cmqlib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cmqlib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cmqlib:
_cmqlib.SwigPyIterator_swigregister(SwigPyIterator)


def BlackPrice(F, K, vol, t_exp, df, PutCall):
    return _cmqlib.BlackPrice(F, K, vol, t_exp, df, PutCall)

def BlackScholesPrice(S, K, vol, t_exp, rf, rd, PutCall):
    return _cmqlib.BlackScholesPrice(S, K, vol, t_exp, rf, rd, PutCall)

def BlackDelta(F, K, vol, t_exp, df, PutCall):
    return _cmqlib.BlackDelta(F, K, vol, t_exp, df, PutCall)

def BSDigitalPrice(F, K, vol, t_exp, df, PutCall):
    return _cmqlib.BSDigitalPrice(F, K, vol, t_exp, df, PutCall)

def BachelierPrice(F, K, vol, t_exp, df, PutCall):
    return _cmqlib.BachelierPrice(F, K, vol, t_exp, df, PutCall)

def BlackImpliedVol(MktPrice, F, K, r, T, PutCall, tol=1e-5):
    return _cmqlib.BlackImpliedVol(MktPrice, F, K, r, T, PutCall, tol)

def BSImpliedVol(MktPrice, S, K, r, T, PutCall, tol=1e-5):
    return _cmqlib.BSImpliedVol(MktPrice, S, K, r, T, PutCall, tol)

def BachelierImpliedVol(MktPrice, F, K, r, T, PutCall, tol=1e-5):
    return _cmqlib.BachelierImpliedVol(MktPrice, F, K, r, T, PutCall, tol)

def american_prem_fut_btree(F, K, vol, t_exp, df, PutCall, bin_tree_nstep=128):
    return _cmqlib.american_prem_fut_btree(F, K, vol, t_exp, df, PutCall, bin_tree_nstep)

def AmericanOptFutPrice(F, K, vol, t_exp, df, PutCall, bin_tree_nstep=128):
    return _cmqlib.AmericanOptFutPrice(F, K, vol, t_exp, df, PutCall, bin_tree_nstep)

def AmericanImpliedVol(MktPrice, F, K, r, T, PutCall, tol=1e-5, bin_tree_nstep=128):
    return _cmqlib.AmericanImpliedVol(MktPrice, F, K, r, T, PutCall, tol, bin_tree_nstep)

def SamuelsonFactor(a, b, t, T, mat):
    return _cmqlib.SamuelsonFactor(a, b, t, T, mat)
class VolNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetVolByStrike(self, strike, dmat=0):
        return _cmqlib.VolNode_GetVolByStrike(self, strike, dmat)

    def GetVolByDelta(self, delta, dmat=0):
        return _cmqlib.VolNode_GetVolByDelta(self, delta, dmat)

    def GetVolByMoneyness(self, ratio, dmat=0):
        return _cmqlib.VolNode_GetVolByMoneyness(self, ratio, dmat)

    def GetInstVol(self, d=0):
        return _cmqlib.VolNode_GetInstVol(self, d)

    def setAtm(self, atm):
        return _cmqlib.VolNode_setAtm(self, atm)

    def setToday(self, dtoday):
        return _cmqlib.VolNode_setToday(self, dtoday)

    def setExp(self, dexp):
        return _cmqlib.VolNode_setExp(self, dexp)

    def setTime2Exp(self, expiryTimes):
        return _cmqlib.VolNode_setTime2Exp(self, expiryTimes)

    def setAccrual(self, accrual):
        return _cmqlib.VolNode_setAccrual(self, accrual)

    def atmVol_(self):
        return _cmqlib.VolNode_atmVol_(self)

    def dtoday_(self):
        return _cmqlib.VolNode_dtoday_(self)

    def dexp_(self):
        return _cmqlib.VolNode_dexp_(self)

    def accrual_(self):
        return _cmqlib.VolNode_accrual_(self)

    def expiry_(self):
        return _cmqlib.VolNode_expiry_(self)

    def time2expiry_(self, dtoday, dexp):
        return _cmqlib.VolNode_time2expiry_(self, dtoday, dexp)

    def nextwkday_(self, dtoday):
        return _cmqlib.VolNode_nextwkday_(self, dtoday)

    def numBusDays_(self, dtoday, dexp):
        return _cmqlib.VolNode_numBusDays_(self, dtoday, dexp)

    def getDayFraction_(self, dd):
        return _cmqlib.VolNode_getDayFraction_(self, dd)

    def __init__(self, *args):
        _cmqlib.VolNode_swiginit(self, _cmqlib.new_VolNode(*args))
    __swig_destroy__ = _cmqlib.delete_VolNode

# Register VolNode in _cmqlib:
_cmqlib.VolNode_swigregister(VolNode)

class SamuelVolNode(VolNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cmqlib.SamuelVolNode_swiginit(self, _cmqlib.new_SamuelVolNode(*args))

    def alpha_(self):
        return _cmqlib.SamuelVolNode_alpha_(self)

    def beta_(self):
        return _cmqlib.SamuelVolNode_beta_(self)

    def setAlpha(self, alpha):
        return _cmqlib.SamuelVolNode_setAlpha(self, alpha)

    def setBeta(self, beta):
        return _cmqlib.SamuelVolNode_setBeta(self, beta)

    def GetVolByMoneyness(self, ratio, dmat):
        return _cmqlib.SamuelVolNode_GetVolByMoneyness(self, ratio, dmat)

    def GetInstVol(self, d):
        return _cmqlib.SamuelVolNode_GetInstVol(self, d)
    __swig_destroy__ = _cmqlib.delete_SamuelVolNode

# Register SamuelVolNode in _cmqlib:
_cmqlib.SamuelVolNode_swigregister(SamuelVolNode)

class Delta5VolNode(VolNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cmqlib.Delta5VolNode_swiginit(self, _cmqlib.new_Delta5VolNode(*args))
    __swig_destroy__ = _cmqlib.delete_Delta5VolNode

    def initialize(self):
        return _cmqlib.Delta5VolNode_initialize(self)

    def setAtm(self, atm):
        return _cmqlib.Delta5VolNode_setAtm(self, atm)

    def setFwd(self, fwd):
        return _cmqlib.Delta5VolNode_setFwd(self, fwd)

    def setD10Vol(self, d10Vol):
        return _cmqlib.Delta5VolNode_setD10Vol(self, d10Vol)

    def setD25Vol(self, d25Vol):
        return _cmqlib.Delta5VolNode_setD25Vol(self, d25Vol)

    def setD75Vol(self, d75Vol):
        return _cmqlib.Delta5VolNode_setD75Vol(self, d75Vol)

    def setD90Vol(self, d90Vol):
        return _cmqlib.Delta5VolNode_setD90Vol(self, d90Vol)

    def d10Vol_(self):
        return _cmqlib.Delta5VolNode_d10Vol_(self)

    def d25Vol_(self):
        return _cmqlib.Delta5VolNode_d25Vol_(self)

    def d75Vol_(self):
        return _cmqlib.Delta5VolNode_d75Vol_(self)

    def d90Vol_(self):
        return _cmqlib.Delta5VolNode_d90Vol_(self)

    def fwd_(self):
        return _cmqlib.Delta5VolNode_fwd_(self)

    def omega_(self):
        return _cmqlib.Delta5VolNode_omega_(self)

    def GetVolByStrike(self, strike, t2mat=0):
        return _cmqlib.Delta5VolNode_GetVolByStrike(self, strike, t2mat)

    def GetVolByDelta(self, delta, t2mat=0):
        return _cmqlib.Delta5VolNode_GetVolByDelta(self, delta, t2mat)

    def GetVolByMoneyness(self, ratio, t2mat=0):
        return _cmqlib.Delta5VolNode_GetVolByMoneyness(self, ratio, t2mat)

# Register Delta5VolNode in _cmqlib:
_cmqlib.Delta5VolNode_swigregister(Delta5VolNode)

class SamuelDelta5VolNode(Delta5VolNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cmqlib.SamuelDelta5VolNode_swiginit(self, _cmqlib.new_SamuelDelta5VolNode(*args))

    def alpha_(self):
        return _cmqlib.SamuelDelta5VolNode_alpha_(self)

    def beta_(self):
        return _cmqlib.SamuelDelta5VolNode_beta_(self)

    def setAlpha(self, alpha):
        return _cmqlib.SamuelDelta5VolNode_setAlpha(self, alpha)

    def setBeta(self, beta):
        return _cmqlib.SamuelDelta5VolNode_setBeta(self, beta)

    def GetVolByMoneyness(self, ratio, dmat):
        return _cmqlib.SamuelDelta5VolNode_GetVolByMoneyness(self, ratio, dmat)

    def GetInstVol(self, d):
        return _cmqlib.SamuelDelta5VolNode_GetInstVol(self, d)
    __swig_destroy__ = _cmqlib.delete_SamuelDelta5VolNode

# Register SamuelDelta5VolNode in _cmqlib:
_cmqlib.SamuelDelta5VolNode_swigregister(SamuelDelta5VolNode)


def FitDelta5VolParams(t2exp, fwd, strikeList, volList):
    return _cmqlib.FitDelta5VolParams(t2exp, fwd, strikeList, volList)
class Pricer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def price(self):
        return _cmqlib.Pricer_price(self)

    def delta(self):
        return _cmqlib.Pricer_delta(self)

    def gamma(self):
        return _cmqlib.Pricer_gamma(self)

    def vega(self):
        return _cmqlib.Pricer_vega(self)

    def theta(self):
        return _cmqlib.Pricer_theta(self)

    def setStrike(self, strike):
        return _cmqlib.Pricer_setStrike(self, strike)

    def setFwd(self, fwd):
        return _cmqlib.Pricer_setFwd(self, fwd)

    def setVol(self, vol):
        return _cmqlib.Pricer_setVol(self, vol)

    def setIR(self, ir):
        return _cmqlib.Pricer_setIR(self, ir)

    def setExpiry(self, dexp):
        return _cmqlib.Pricer_setExpiry(self, dexp)

    def setT2Exp(self, time2expiry):
        return _cmqlib.Pricer_setT2Exp(self, time2expiry)

    def setToday(self, dtoday):
        return _cmqlib.Pricer_setToday(self, dtoday)

    def setOtype(self, otype):
        return _cmqlib.Pricer_setOtype(self, otype)

    def strike_(self):
        return _cmqlib.Pricer_strike_(self)

    def fwd_(self):
        return _cmqlib.Pricer_fwd_(self)

    def vol_(self):
        return _cmqlib.Pricer_vol_(self)

    def dexp_(self):
        return _cmqlib.Pricer_dexp_(self)

    def dtoday_(self):
        return _cmqlib.Pricer_dtoday_(self)

    def time2expiry_(self):
        return _cmqlib.Pricer_time2expiry_(self)

    def irate_(self):
        return _cmqlib.Pricer_irate_(self)

    def otype_(self):
        return _cmqlib.Pricer_otype_(self)

    def priceTweak(self):
        return _cmqlib.Pricer_priceTweak(self)

    def volTweak(self):
        return _cmqlib.Pricer_volTweak(self)
    __swig_destroy__ = _cmqlib.delete_Pricer

# Register Pricer in _cmqlib:
_cmqlib.Pricer_swigregister(Pricer)

class BlackPricer(Pricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cmqlib.BlackPricer_swiginit(self, _cmqlib.new_BlackPricer(*args))

    def price(self):
        return _cmqlib.BlackPricer_price(self)
    __swig_destroy__ = _cmqlib.delete_BlackPricer

# Register BlackPricer in _cmqlib:
_cmqlib.BlackPricer_swigregister(BlackPricer)

class AmericanFutPricer(Pricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cmqlib.AmericanFutPricer_swiginit(self, _cmqlib.new_AmericanFutPricer(*args))

    def price(self):
        return _cmqlib.AmericanFutPricer_price(self)
    __swig_destroy__ = _cmqlib.delete_AmericanFutPricer

# Register AmericanFutPricer in _cmqlib:
_cmqlib.AmericanFutPricer_swigregister(AmericanFutPricer)

class DigitalPricer(Pricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cmqlib.DigitalPricer_swiginit(self, _cmqlib.new_DigitalPricer(*args))

    def price(self):
        return _cmqlib.DigitalPricer_price(self)
    __swig_destroy__ = _cmqlib.delete_DigitalPricer

# Register DigitalPricer in _cmqlib:
_cmqlib.DigitalPricer_swigregister(DigitalPricer)

class BachelierPricer(Pricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cmqlib.BachelierPricer_swiginit(self, _cmqlib.new_BachelierPricer(*args))

    def price(self):
        return _cmqlib.BachelierPricer_price(self)
    __swig_destroy__ = _cmqlib.delete_BachelierPricer

# Register BachelierPricer in _cmqlib:
_cmqlib.BachelierPricer_swigregister(BachelierPricer)

class BlackStripPricer(Pricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dtoday, startDate, endDate, fwd, vol, strike, ir, otype, hols):
        _cmqlib.BlackStripPricer_swiginit(self, _cmqlib.new_BlackStripPricer(dtoday, startDate, endDate, fwd, vol, strike, ir, otype, hols))

    def price(self):
        return _cmqlib.BlackStripPricer_price(self)

    def setFwd(self, fwd):
        return _cmqlib.BlackStripPricer_setFwd(self, fwd)

    def setVol(self, vol):
        return _cmqlib.BlackStripPricer_setVol(self, vol)

    def setIR(self, ir):
        return _cmqlib.BlackStripPricer_setIR(self, ir)

    def setToday(self, dtoday):
        return _cmqlib.BlackStripPricer_setToday(self, dtoday)
    __swig_destroy__ = _cmqlib.delete_BlackStripPricer

# Register BlackStripPricer in _cmqlib:
_cmqlib.BlackStripPricer_swigregister(BlackStripPricer)

class DigitalStripPricer(Pricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dtoday, startDate, endDate, fwd, vol, strike, ir, otype, hols):
        _cmqlib.DigitalStripPricer_swiginit(self, _cmqlib.new_DigitalStripPricer(dtoday, startDate, endDate, fwd, vol, strike, ir, otype, hols))

    def price(self):
        return _cmqlib.DigitalStripPricer_price(self)

    def setFwd(self, fwd):
        return _cmqlib.DigitalStripPricer_setFwd(self, fwd)

    def setVol(self, vol):
        return _cmqlib.DigitalStripPricer_setVol(self, vol)

    def setIR(self, ir):
        return _cmqlib.DigitalStripPricer_setIR(self, ir)

    def setToday(self, dtoday):
        return _cmqlib.DigitalStripPricer_setToday(self, dtoday)
    __swig_destroy__ = _cmqlib.delete_DigitalStripPricer

# Register DigitalStripPricer in _cmqlib:
_cmqlib.DigitalStripPricer_swigregister(DigitalStripPricer)

class BarrierPricer(Pricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dtoday, dexp, fwd, vol, strike, barrier, btype, ir, otype, mtype):
        _cmqlib.BarrierPricer_swiginit(self, _cmqlib.new_BarrierPricer(dtoday, dexp, fwd, vol, strike, barrier, btype, ir, otype, mtype))

    def price(self):
        return _cmqlib.BarrierPricer_price(self)

    def setBarrier(self, barrier):
        return _cmqlib.BarrierPricer_setBarrier(self, barrier)

    def setBtype(self, btype):
        return _cmqlib.BarrierPricer_setBtype(self, btype)

    def setMtype(self, mtype):
        return _cmqlib.BarrierPricer_setMtype(self, mtype)

    def barrier_(self):
        return _cmqlib.BarrierPricer_barrier_(self)

    def btype_(self):
        return _cmqlib.BarrierPricer_btype_(self)

    def mtype_(self):
        return _cmqlib.BarrierPricer_mtype_(self)
    __swig_destroy__ = _cmqlib.delete_BarrierPricer

# Register BarrierPricer in _cmqlib:
_cmqlib.BarrierPricer_swigregister(BarrierPricer)

class BarrierStripPricer(Pricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dtoday, startDate, endDate, fwd, vol, strike, barrier, btype, ir, otype, mtype, hols):
        _cmqlib.BarrierStripPricer_swiginit(self, _cmqlib.new_BarrierStripPricer(dtoday, startDate, endDate, fwd, vol, strike, barrier, btype, ir, otype, mtype, hols))

    def price(self):
        return _cmqlib.BarrierStripPricer_price(self)

    def setFwd(self, fwd):
        return _cmqlib.BarrierStripPricer_setFwd(self, fwd)

    def setVol(self, vol):
        return _cmqlib.BarrierStripPricer_setVol(self, vol)

    def setIR(self, ir):
        return _cmqlib.BarrierStripPricer_setIR(self, ir)

    def setToday(self, dtoday):
        return _cmqlib.BarrierStripPricer_setToday(self, dtoday)

    def setBarrier(self, barrier):
        return _cmqlib.BarrierStripPricer_setBarrier(self, barrier)

    def setBtype(self, btype):
        return _cmqlib.BarrierStripPricer_setBtype(self, btype)

    def setMtype(self, mtype):
        return _cmqlib.BarrierStripPricer_setMtype(self, mtype)

    def barrier_(self):
        return _cmqlib.BarrierStripPricer_barrier_(self)

    def btype_(self):
        return _cmqlib.BarrierStripPricer_btype_(self)

    def mtype_(self):
        return _cmqlib.BarrierStripPricer_mtype_(self)
    __swig_destroy__ = _cmqlib.delete_BarrierStripPricer

# Register BarrierStripPricer in _cmqlib:
_cmqlib.BarrierStripPricer_swigregister(BarrierStripPricer)


def SmileToLognormal(p, stdev, Strikes, CDFs):
    return _cmqlib.SmileToLognormal(p, stdev, Strikes, CDFs)
class BarrierSmilePricer(BarrierPricer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dtoday, dexp, fwd, vol, strike, barrier, btype, ir, otype, mtype, nSteps=1600, nSigmas=6.0):
        _cmqlib.BarrierSmilePricer_swiginit(self, _cmqlib.new_BarrierSmilePricer(dtoday, dexp, fwd, vol, strike, barrier, btype, ir, otype, mtype, nSteps, nSigmas))

    def price(self):
        return _cmqlib.BarrierSmilePricer_price(self)

    def priceTweak(self):
        return _cmqlib.BarrierSmilePricer_priceTweak(self)

    def volTweak(self):
        return _cmqlib.BarrierSmilePricer_volTweak(self)
    __swig_destroy__ = _cmqlib.delete_BarrierSmilePricer

# Register BarrierSmilePricer in _cmqlib:
_cmqlib.BarrierSmilePricer_swigregister(BarrierSmilePricer)

class TimeSeries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def date_(self):
        return _cmqlib.TimeSeries_date_(self)

    def data_(self):
        return _cmqlib.TimeSeries_data_(self)

    def __init__(self, *args):
        _cmqlib.TimeSeries_swiginit(self, _cmqlib.new_TimeSeries(*args))

    def setDate(self, date):
        return _cmqlib.TimeSeries_setDate(self, date)

    def setData(self, data):
        return _cmqlib.TimeSeries_setData(self, data)

    def isValidated(self):
        return _cmqlib.TimeSeries_isValidated(self)
    __swig_destroy__ = _cmqlib.delete_TimeSeries

# Register TimeSeries in _cmqlib:
_cmqlib.TimeSeries_swigregister(TimeSeries)


def GetTSWeightedSum(ts1, ts2, w1, w2):
    return _cmqlib.GetTSWeightedSum(ts1, ts2, w1, w2)
class HistVolCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ts, expiry, freq, btMonths):
        _cmqlib.HistVolCalculator_swiginit(self, _cmqlib.new_HistVolCalculator(ts, expiry, freq, btMonths))

    def pricer(self, fwd, strike, vol, currDate):
        return _cmqlib.HistVolCalculator_pricer(self, fwd, strike, vol, currDate)

    def delta(self, fwd, strike, vol, currDate):
        return _cmqlib.HistVolCalculator_delta(self, fwd, strike, vol, currDate)

    def deltaHedgePL(self, vol, start_idx, end_idx):
        return _cmqlib.HistVolCalculator_deltaHedgePL(self, vol, start_idx, end_idx)

    def BreakevenVols(self):
        return _cmqlib.HistVolCalculator_BreakevenVols(self)

    def ts_(self):
        return _cmqlib.HistVolCalculator_ts_(self)

    def freq_(self):
        return _cmqlib.HistVolCalculator_freq_(self)

    def expiry_(self):
        return _cmqlib.HistVolCalculator_expiry_(self)

    def setExpiry(self, expiry):
        return _cmqlib.HistVolCalculator_setExpiry(self, expiry)

    def setFreq(self, freq):
        return _cmqlib.HistVolCalculator_setFreq(self, freq)

    def setTS(self, ts):
        return _cmqlib.HistVolCalculator_setTS(self, ts)
    __swig_destroy__ = _cmqlib.delete_HistVolCalculator

# Register HistVolCalculator in _cmqlib:
_cmqlib.HistVolCalculator_swigregister(HistVolCalculator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cmqlib.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cmqlib.IntVector___nonzero__(self)

    def __bool__(self):
        return _cmqlib.IntVector___bool__(self)

    def __len__(self):
        return _cmqlib.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _cmqlib.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cmqlib.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cmqlib.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cmqlib.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cmqlib.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cmqlib.IntVector___setitem__(self, *args)

    def pop(self):
        return _cmqlib.IntVector_pop(self)

    def append(self, x):
        return _cmqlib.IntVector_append(self, x)

    def empty(self):
        return _cmqlib.IntVector_empty(self)

    def size(self):
        return _cmqlib.IntVector_size(self)

    def swap(self, v):
        return _cmqlib.IntVector_swap(self, v)

    def begin(self):
        return _cmqlib.IntVector_begin(self)

    def end(self):
        return _cmqlib.IntVector_end(self)

    def rbegin(self):
        return _cmqlib.IntVector_rbegin(self)

    def rend(self):
        return _cmqlib.IntVector_rend(self)

    def clear(self):
        return _cmqlib.IntVector_clear(self)

    def get_allocator(self):
        return _cmqlib.IntVector_get_allocator(self)

    def pop_back(self):
        return _cmqlib.IntVector_pop_back(self)

    def erase(self, *args):
        return _cmqlib.IntVector_erase(self, *args)

    def __init__(self, *args):
        _cmqlib.IntVector_swiginit(self, _cmqlib.new_IntVector(*args))

    def push_back(self, x):
        return _cmqlib.IntVector_push_back(self, x)

    def front(self):
        return _cmqlib.IntVector_front(self)

    def back(self):
        return _cmqlib.IntVector_back(self)

    def assign(self, n, x):
        return _cmqlib.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _cmqlib.IntVector_resize(self, *args)

    def insert(self, *args):
        return _cmqlib.IntVector_insert(self, *args)

    def reserve(self, n):
        return _cmqlib.IntVector_reserve(self, n)

    def capacity(self):
        return _cmqlib.IntVector_capacity(self)
    __swig_destroy__ = _cmqlib.delete_IntVector

# Register IntVector in _cmqlib:
_cmqlib.IntVector_swigregister(IntVector)

class DblVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cmqlib.DblVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cmqlib.DblVector___nonzero__(self)

    def __bool__(self):
        return _cmqlib.DblVector___bool__(self)

    def __len__(self):
        return _cmqlib.DblVector___len__(self)

    def __getslice__(self, i, j):
        return _cmqlib.DblVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cmqlib.DblVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cmqlib.DblVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cmqlib.DblVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cmqlib.DblVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cmqlib.DblVector___setitem__(self, *args)

    def pop(self):
        return _cmqlib.DblVector_pop(self)

    def append(self, x):
        return _cmqlib.DblVector_append(self, x)

    def empty(self):
        return _cmqlib.DblVector_empty(self)

    def size(self):
        return _cmqlib.DblVector_size(self)

    def swap(self, v):
        return _cmqlib.DblVector_swap(self, v)

    def begin(self):
        return _cmqlib.DblVector_begin(self)

    def end(self):
        return _cmqlib.DblVector_end(self)

    def rbegin(self):
        return _cmqlib.DblVector_rbegin(self)

    def rend(self):
        return _cmqlib.DblVector_rend(self)

    def clear(self):
        return _cmqlib.DblVector_clear(self)

    def get_allocator(self):
        return _cmqlib.DblVector_get_allocator(self)

    def pop_back(self):
        return _cmqlib.DblVector_pop_back(self)

    def erase(self, *args):
        return _cmqlib.DblVector_erase(self, *args)

    def __init__(self, *args):
        _cmqlib.DblVector_swiginit(self, _cmqlib.new_DblVector(*args))

    def push_back(self, x):
        return _cmqlib.DblVector_push_back(self, x)

    def front(self):
        return _cmqlib.DblVector_front(self)

    def back(self):
        return _cmqlib.DblVector_back(self)

    def assign(self, n, x):
        return _cmqlib.DblVector_assign(self, n, x)

    def resize(self, *args):
        return _cmqlib.DblVector_resize(self, *args)

    def insert(self, *args):
        return _cmqlib.DblVector_insert(self, *args)

    def reserve(self, n):
        return _cmqlib.DblVector_reserve(self, n)

    def capacity(self):
        return _cmqlib.DblVector_capacity(self)
    __swig_destroy__ = _cmqlib.delete_DblVector

# Register DblVector in _cmqlib:
_cmqlib.DblVector_swigregister(DblVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cmqlib.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cmqlib.StringVector___nonzero__(self)

    def __bool__(self):
        return _cmqlib.StringVector___bool__(self)

    def __len__(self):
        return _cmqlib.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _cmqlib.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cmqlib.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cmqlib.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cmqlib.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cmqlib.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cmqlib.StringVector___setitem__(self, *args)

    def pop(self):
        return _cmqlib.StringVector_pop(self)

    def append(self, x):
        return _cmqlib.StringVector_append(self, x)

    def empty(self):
        return _cmqlib.StringVector_empty(self)

    def size(self):
        return _cmqlib.StringVector_size(self)

    def swap(self, v):
        return _cmqlib.StringVector_swap(self, v)

    def begin(self):
        return _cmqlib.StringVector_begin(self)

    def end(self):
        return _cmqlib.StringVector_end(self)

    def rbegin(self):
        return _cmqlib.StringVector_rbegin(self)

    def rend(self):
        return _cmqlib.StringVector_rend(self)

    def clear(self):
        return _cmqlib.StringVector_clear(self)

    def get_allocator(self):
        return _cmqlib.StringVector_get_allocator(self)

    def pop_back(self):
        return _cmqlib.StringVector_pop_back(self)

    def erase(self, *args):
        return _cmqlib.StringVector_erase(self, *args)

    def __init__(self, *args):
        _cmqlib.StringVector_swiginit(self, _cmqlib.new_StringVector(*args))

    def push_back(self, x):
        return _cmqlib.StringVector_push_back(self, x)

    def front(self):
        return _cmqlib.StringVector_front(self)

    def back(self):
        return _cmqlib.StringVector_back(self)

    def assign(self, n, x):
        return _cmqlib.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _cmqlib.StringVector_resize(self, *args)

    def insert(self, *args):
        return _cmqlib.StringVector_insert(self, *args)

    def reserve(self, n):
        return _cmqlib.StringVector_reserve(self, n)

    def capacity(self):
        return _cmqlib.StringVector_capacity(self)
    __swig_destroy__ = _cmqlib.delete_StringVector

# Register StringVector in _cmqlib:
_cmqlib.StringVector_swigregister(StringVector)

class ConstCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cmqlib.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cmqlib.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _cmqlib.ConstCharVector___bool__(self)

    def __len__(self):
        return _cmqlib.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _cmqlib.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cmqlib.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cmqlib.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cmqlib.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cmqlib.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cmqlib.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _cmqlib.ConstCharVector_pop(self)

    def append(self, x):
        return _cmqlib.ConstCharVector_append(self, x)

    def empty(self):
        return _cmqlib.ConstCharVector_empty(self)

    def size(self):
        return _cmqlib.ConstCharVector_size(self)

    def swap(self, v):
        return _cmqlib.ConstCharVector_swap(self, v)

    def begin(self):
        return _cmqlib.ConstCharVector_begin(self)

    def end(self):
        return _cmqlib.ConstCharVector_end(self)

    def rbegin(self):
        return _cmqlib.ConstCharVector_rbegin(self)

    def rend(self):
        return _cmqlib.ConstCharVector_rend(self)

    def clear(self):
        return _cmqlib.ConstCharVector_clear(self)

    def get_allocator(self):
        return _cmqlib.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _cmqlib.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _cmqlib.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        _cmqlib.ConstCharVector_swiginit(self, _cmqlib.new_ConstCharVector(*args))

    def push_back(self, x):
        return _cmqlib.ConstCharVector_push_back(self, x)

    def front(self):
        return _cmqlib.ConstCharVector_front(self)

    def back(self):
        return _cmqlib.ConstCharVector_back(self)

    def assign(self, n, x):
        return _cmqlib.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _cmqlib.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _cmqlib.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _cmqlib.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _cmqlib.ConstCharVector_capacity(self)
    __swig_destroy__ = _cmqlib.delete_ConstCharVector

# Register ConstCharVector in _cmqlib:
_cmqlib.ConstCharVector_swigregister(ConstCharVector)



